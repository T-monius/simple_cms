# simple_cms.txt

Understanding
  - Getting Started
    + Route for '/'
      > Need an application file in the main directory of the
        application
      > This should be a GET method
    + Displays 'Getting started.' to the user
      > This appears not to have any particular formatting so
        could be sent back to the browser as a simple string.
      > Still better to render it in a view template with
        simple HTML
    + What other files do I need?
      > Gemfile, will certainly need other dependencies
      > CSS file, eventually
      > JavaScript, maybe

Implementaion
  - Getting Started
    + Route for '/'
      > Create file `cms.rb`
      > Include sinatra, reloader, tilt
      > Implement a get for '/'
      > Render a view (home, getting_started ?)
    + Getting Started
      > Views folder
      > Erb file
      > HTML
      > simple `<p>` tag to display the phrase

Adding an Index Page
Understanding
  - The files are the storage for the cms app
  - The files should all be stored in one directory outside of
    the route directory of our project. (subdirectory)
  - Modify the same route as 'Getting Started.' to display the
    contents of the 'data' directory
  - I'm using a view template, so modify that template

Implementation
  - Create a `data` directory in the route
  - Create 3 text files in `data`
  - Store the contents of the `data` directory as a variable
    (`Dir`)
    + `Dir#[]` takes a string and returns an array of strings
    + The strings need to be cleaned up so as to remove the
      directory extension
      > Can use `String#gsub`
      > regex or string argument to replace the 'data/'
  - Make the instance variable available to the `home.erb` file
  - Rendering
    + Iterate the array of files stored as an instance variable
    + Output them as an unordered list in embedded HTML.
  - Note* All of this could be done w/o the erb file returning
    the unordered list as an erb result string.

Viewing Text Files
  - 1) Index/home page presents a list of links

  - 2) Clicking the link takes the user to the page w/ the
    content of the file.

  - 3) The actual path name in the browser should take the user
    to the pertinent page

  - 4) Text file rendered as plaintext

Implementation
  - 1)
    + Render each list item w/ an `<a>` tag containing an
      `href` attribute
  - 2)
    + GET for the link
    + Create a view template in which to render the content, or
      send back the content as plaintext
  - 3)
    + GET for the path
    + Should be the same as the previous
    + Unless, the previous ought to have been a POST which I
      wouldn't see the reason for.
  - 4)
    + Put the file content in a nested `<p>` tag that has a
      parent `<a>` with a type of 'plaintext'?
      > I may have to use the CSS file to format this.

Adding Tests
  - 1) Write tests for the routes the application already has
    + Must have a test file
      > All proper requirements
      > The class
      > The tests
      > The assertions
    + File to test is `cms.rb`
    + Test must be in the `test` subdirectory according to the
      filepath that was in the example
Implementation
  - Make a test directory
  - Make the test file
    + Set my environment variable
    + Require my libraries
    + Make the expected call to `app`?
    + Write the test suite
      > Inherits from `Minitest::Test`
      > Write my tests
    + Tests for current routes

Handling Requests for Nonexistent Documents
  - A non-existent document will prompt a Sinatra not found
    page
  - The Not Found is a 3xx status
    + Does this have to be implemented on each of our routes?
    + Special route `not_found`
  - 1) Redirect a user to the index page and show a message
    `$DOCUMENT does not exist.` when attempting to view a
    document that does not exist.
  - 2) Write a test for the assignment
    + Lesson prompts us to try to describe exactly what the
      user does in the test.
    + I find this adds to the obscurity

Implementation
  - 1)
    + Enable sessions in the application
    + Store a message in the session
      > Document available in the `params` hash
      > Should be part of a path parameter
      > Use `File::basename` to get the name of the file.
      > Alternatively, request info can be accessed with `request#...`
    + Add a display in the index.erb that deletes and returns
      the session message
  - 2) 
    + I would test for the status
    + Test the `not_found` to have a 3xx status

Viewing Markdown Files
  - Markdown, text-to-html markup language
    + Raw Markdown to HTML libraries
  - 1) When a user views a document written in Markdown format
    , the browser should render the rendered HTML version of the document's content.
    + The document should be in markdown
    + I need to brush-up on markdown

Implementation
  - 1)
    / + Add `redcarpet` to the `Gemfile`
    /   > Run `bundle install`
    / + Add `require "redcarpet"` to app
    / + Figure out what a markdown document looks like
    /   > Rename about.txt to about.md
    / + Re-write my about page with the new content in
        Markdown
    / + Create a helper method 'render_markdown'
    + Modify the `/:filename' route to determine if a file is
      in Markdown.
      > Once I know it's a file
        = Need to know what it's extension is
        = Render a txt file as plaintext
        = Render an md file as HTML
        = Different header
        = Use the helper
          - This presupposes that I'm using a view template?
      > User `render_markdown` if so

Editing Document Content
  - 1) Link "Edit" next to each document on index page
  - 2) Clicking the Edit Link takes the user to an edit page
    for the document
  - 3) Document's content appears in a textarea of the edit
    page
  - 4) Editing and clicking "Save Changes" redirects to the
    index page showing `$FILENAME has been updated`

Implementation
  - 1)
    + Update `index.erb` to support a link when iterating
  - 2)
    + Create a GET for '/:filename/edit'
    + Create an `edit_document.erb`
  - 3)
    + Put the file content in an HTML element that can be
      styled as a box
      > Form, input
      > Box border, solid black line
      > Little knotches in the lower right corner
      > Aligned left
      > Not much padding
      > Contents also aligned left
  - 4) 
    + Create a POST for the form action in `cms.rb`
      '/:filename/edit'
    + Define the action in `edit_document.erb` to POST
      appropriately
    + Form name, 'Save Changes'
    + The name of the document captured from the URL and
      displayed as a flash message.
      > Add a message to the session in POST route
      > Redirect the user to the index page

Adding Global Style and Behaviour
  - 1) Message displayed to the user against a yellow
    background
    + `background-color`
  - 2) Messages disappear if the page they appear on is
    reloaded
    + This functionality already exists...
  - 3) Text Files should continue to be displayed by the
    browser as plain text
    + Will I need to override a global text selector or simply
      use a more specific rule?
  - 4) The entire site (icluding markdown files, but not
    text files) should be displayed in a sans-serif typeface
    + Can use a reset with * or create selectors
  - Understanding
    + Since we are talking about global styling, we should use
      a CSS file
    + Another consideration is whether or not a layout is
      necessary at this point
    + Can reset all elements with *

Implementation
  - 1) 
    + Create a CSS class selector for messages
    + Make the flash message of a class
    + Define the CSS selector with a property of `background-
      image` and a value of yellow
  - 2)
    + Already handled
  - 3)
    + These files do seem to be rendering as plaintext as the
      header type is set
  - 4)
    + 

Adding a Document
  - 1) When a user views the index page, they should see a
    link that says "New Document".
  - 2) When a user clicks the "New Document" link, they
    should be taken to a page with a text input labeled "Add a new document:" and a submit button labeled "Create":
  - 3) When a user enters a document name and clicks
    Create", they should be redirected to the index page. The name they entered in the form should now appear in the file list. They should see a message that says "$FILENAME was created.", where $FILENAME is the name of the document just created:
  - 4) If a user attempts to create a new document without a
    name, the form should be re-displayed and a message should say "A name is required."

Implementation
  - 1)
    + A new link in the `index.erb` page
    + Link with a new GET route in `cms.rb` to handle it
  - 2)
    + Route sends the user to a page that is similar to the
      edit document route
    + Form document with a test area
      > This text area is much smaller than in the other
      > The input is the name of the document
  - 3/4)
    + POST to handle the form submission
    + Validate the input
      > If it's valid then create a document by that name
        and store the name as a message
      > Else store a message and re-render the new document
        page.

Deleting Documents
  - 1) When a user views the index page, they should see a
    "delete" button next to each document.
  - 2) When a user clicks a "delete" button, the application
    should delete the appropriate document and display a message: "$FILENAME was deleted".

Implementation
  - 1)
    + Add a new form to the index page with a submit button
    + The form is to a POST route
  - 2)
    + Use an `IO` or `File` class method to delete the
      document
    + Add a message
    + Re-render the page

Signing In and Out
  - 1)
    + Add a link to the page for 'Sign In'
    + get that redirects to sign in page
  - 2)
    + get route for '/user/sign_in' ?
    + Template for Signing in
      > Form
      > post action with given value
      > Two inputs: username and password
      > Button: 'Sign In'
  - 3) 
    + post route
      > Verifies the username and password
      > If they pass, assign a 'signed in' token to true
        then redirect to the route
      > 4) Else, re-render the sign in page w/ the username as
        a value for the first input in the form
  - 5)
    + Modify the index page to display the 'signed in message'
      if the session 'signed in' token is true
    + Display a link for 'Sign Out' (post)
  - 6)
    + Post route for 'Signing Out'
    + Modify the session 'signed_in' to reflect false
    + Set a message to the session for 'signing out'
    + redirect to the index

Restricting Actions to Only Signed-in Users
  - This will simply modify existing routes
  - Can modify existing tests for testing purposes
  1) The following actions redirect to index w/ message if
    the user is not signed in:
    + Visit the edit page for a document
    + Submit the changes to a document
    + Visit the new document page
    + Submit the new document form
    + Delete a document

Implementation
  - Some of these actions permit the user to visit pages
    they would be restricted from visiting by the index
    but nonetheless are there
  - Visit the edit page
    + From the edit get route, only redirect if signed in
    + Provide a session message if not
    + Send status and redirect back to index
  - Submit changes to a document
    + If on the edit page
    + In post for edit, redirect back to the get for edit
    + Provide a message and status
  - Visit the new document page
    + From the index route, provide authentication
    + Redirect back to the index with message and status
  - Submit the new document form
    + From the new doc post route, verify sign in
    + Redirect back with message and status if not
  - Delete a Document
    + From the post for deleting, redirect back
    + Message and status

Storing User Accpounts in an External File
  - 1) An administrator should be able to modify the list of
    users who may sign into the application by editing a configuration file using their text editor.

Implementation
  - 1)
    + Signing in as the administrator renders an extra file
      at index
      > Config file
      > Stored in data?
      > Stored in config directory?
        = Have to create a method to access that path
        = All roots that render files need to check if
          the file is in the data or config directory
    + What should be the format of the config file?
      > YAML?
      > Create a file called users.yml and add a few users to
        it. Use the format specified above in the hint.
    + Is the administrator on the list?
      > I'll have my program authenticate the administrator
        from the list as well
  - 2) 
    + When a user is attempting to sign in, load the file
      created in #1 and use it to validate the user's credentials.
  - 3) 
    + Modify the application to use test/users.yml to load
      user credentials during testing.
